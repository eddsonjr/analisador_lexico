
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analisador_lexico;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Paths;


public class Arquivo {
    
    private String fileName;
    private String conteudoArquivo = new String(); 
    
    private BufferedReader br = null;
    private FileReader fr = null;
    private Writer writer = null;
    
    
    
    public Arquivo(String fileName){
        this.fileName = fileName;
        
    }
    
    public Arquivo(String fileName, String conteudoArquivo){
        this.fileName = fileName;
        this.conteudoArquivo = conteudoArquivo;
    }
    
    
    
    
    public String lerConteudoArquivo() {
        try{
            fr = new FileReader(this.fileName);
            br = new BufferedReader(fr);
            
            
            while ((this.conteudoArquivo = br.readLine()) != null) {
		this.conteudoArquivo += this.conteudoArquivo;
                
            }
            
        }catch (IOException e) {
            System.err.println("ERRO AO LER OU CARREGAR ARQUIVO!");
            e.printStackTrace();
        } finally {

		try {

                    if (br != null)
                        br.close();

		if (fr != null)
			fr.close();
                } catch (IOException ex) {
                    System.err.println("ERRO AO FECHAR ARQUIVO/BUFFER");
                    ex.printStackTrace();

		}

	}
        return this.conteudoArquivo;
    }
    
    
    public void salvarArquivo() {
        try {
            writer = new BufferedWriter(new OutputStreamWriter(
            new FileOutputStream(this.fileName), "utf-8"));
            writer.write(this.conteudoArquivo);
        } catch (IOException e) {
            System.err.println("ERRO AO SALVAR ARQUIVO!");
            e.printStackTrace();
        } finally {
             try {writer.close(); 
             
             }catch (Exception e) {
                System.err.println("ERRO AO FECHAR ARQUIVO DEPOIS DE CRIADO!");
                e.printStackTrace();
             }
        }
    }
    
    
    
    
}



























package analisador_lexico;

%%

%{

private void imprimir(String descricao, String lexema) {
    System.out.println(lexema + " : " + descricao);
    
    //criando uma string que ira receber tanto a descricao quanto o lexema
    //para depois colocar 
    StringBuilder textLine = new StringBuilder();
    textLine.append(lexema);
    textLine.append(" : ");
    textLine.append(descricao);
    textLine.append("\n");

    Arquivo arquivo = new Arquivo("./output.txt");
    arquivo.setConteudoArquivo(textLine.toString());

    arquivo.salvarArquivo();
    

}


   private void PrintError() {
        StringBuilder textLine = new StringBuilder();
        String mainError = "ERROR: LEXEMA NAO FAZ PARTE DA LINGUAGEM: ";
        String lexemaError = new String(yytext());

        textLine.append(mainError);
        textLine.append(lexemaError);
        System.err.println(textLine.toString());

        Arquivo arquivo = new Arquivo("./output.txt");
        arquivo.setConteudoArquivo(textLine.toString());
        arquivo.salvarArquivo();
        
   }

%}


%class LexicalAnalyzer
%type void


BRANCO = [\n| |\t|\r]
IDENTIFICADOR = [|a-z|A-Z][a-z|A-Z|0-9|]*
INTEIRO = [-]?(0|[1-9][0-9]*)
REAL =    [-]?([0-9]*[.])[0-9]+
EXPRESSAOLITERAL = ("(.*?)")



SOMA = ([+-]?(0|[1-9][0-9]*)[+]\(?([+-]?(0|[1-9][0-9]*))\)?)
SUBTRACAO = ([+-]?(0|[1-9][0-9]*)[-]\(?([+-]?(0|[1-9][0-9]*))\)?)
MULTIPLICACAO = ([+-]?(0|[1-9][0-9]*)[*]\(?([+-]?(0|[1-9][0-9]*))\)?)
DIVISAO = "/"


ATRIBUICAO = "="
ABERTURABLOCO = "{"
FECHAMENTOBLOCO = "}"
ABERTURAPARENTESES = "("
FECHAMENTOPARENTESES = ")"
COMENTARIO = "//"


MENOR = "<"
MAIOR = ">"
MENORIGUAL = "<="
MAIORIGUAL = ">="
IGUAL = "=="
DIFERENTE = "!="


TERMINADOR = ";"



%%

"if"                         { imprimir("Palavra reservada if", yytext()); }
"elseif"                     { imprimir("Palavra reservada elseif", yytext()); }
"else"                       { imprimir("Palavra reservada else", yytext()); }
"then"                       { imprimir("Palavra reservada then", yytext()); }
"int"                        { imprimir("Palavra reservada int", yytext()); }
"real"                       { imprimir("Palavra reservada real", yytext()); }
"for"                        { imprimir("Palavra reservada for", yytext()); }
"string"                     { imprimir("Palavra reservada string", yytext()); }
"print"                      { imprimir("Palavra reservada print", yytext()); }
"read"                       { imprimir("Palavra reservada read", yytext()); }




{BRANCO}                    { imprimir("Espaco em branco", yytext()); }
{IDENTIFICADOR}             { imprimir("Identificador", yytext()); }
{INTEIRO}                   { imprimir("Número Inteiro", yytext()); }
{EXPRESSAOLITERAL}          { imprimir("Expressao literal", yytext());}
{REAL}                      { imprimir("Número Real", yytext());}



{SOMA}                      { imprimir("Operador de soma", yytext()); }
{SUBTRACAO}                 { imprimir("Operador de subtracao", yytext()); }
{MULTIPLICACAO}             { imprimir("Operador de multiplicacao", yytext());}
{DIVISAO}                   { imprimir("Operador de divisao", yytext());}
{ATRIBUICAO}                { imprimir("Operador de atribuicao", yytext());}
{MENOR}                     { imprimir("Operador de menor", yytext());}
{MAIOR}                     { imprimir("Operador de maior", yytext());}
{MENORIGUAL}                { imprimir("Operador de menor ou igual", yytext());}
{MAIORIGUAL}                { imprimir("Operador de maior ou igual", yytext());}
{IGUAL}                     { imprimir("Operador de igualdade", yytext());}
{DIFERENTE}                 { imprimir("Operador de diferente de", yytext());}
{ABERTURABLOCO}             { imprimir("Abertura bloco", yytext());}
{FECHAMENTOBLOCO}           { imprimir("Fechamento bloco", yytext());}
{ABERTURAPARENTESES}        { imprimir("Inicio expressao", yytext());}
{FECHAMENTOPARENTESES}      { imprimir("Fim expressao", yytext());}
{COMENTARIO}                { imprimir("Comentario", yytext());}
{TERMINADOR}                { imprimir("Terminador de instrucao", yytext());}




. { 
    PrintError();
    throw new RuntimeException("RUNTIME ERROR>> Lexema invalido: " + yytext());}


























package analisador_lexico;

%%

%{

private void imprimir(String descricao, String lexema) {
    System.out.println(lexema + " : " + descricao);
    
    //criando uma string que ira receber tanto a descricao quanto o lexema
    //para depois colocar 
    StringBuilder textLine = new StringBuilder();
    textLine.append(lexema);
    textLine.append(" : ");
    textLine.append(descricao);
    textLine.append("\n");

    Arquivo arquivo = new Arquivo("./output.txt");
    arquivo.setConteudoArquivo(textLine.toString());

    arquivo.salvarArquivo();
    

}


   private void PrintError() {
        StringBuilder textLine = new StringBuilder();
        String mainError = "ERROR: LEXEMA NAO FAZ PARTE DA LINGUAGEM: ";
        String lexemaError = new String(yytext());

        textLine.append(mainError);
        textLine.append(lexemaError);
        System.err.println(textLine.toString());

        Arquivo arquivo = new Arquivo("./output.txt");
        arquivo.setConteudoArquivo(textLine.toString());
        arquivo.salvarArquivo();
        
   }

%}


%class LexicalAnalyzer
%type void


BRANCO = [\n| |\t|\r]
IDENTIFICADOR = [|a-z|A-Z][a-z|A-Z|0-9|]*
INTEIRO = ([-]?\d+)
REAL =    ([-]?(\d+)[.](\d+))
EXPRESSAOLITERAL =(["](.*?)["])
EXPRESSAOLITERALCOMVALOR = (("(.*?)")[#]((((-{1})?(\d+)[.](\d+))|((-{1})?\d+)))[#]("(.*?)"))



SOMA = ((((-{1})?(\d+)[.](\d+))|((-{1})?\d+))\s[+]\s([(]?((((-{1})?(\d+)[.](\d+))|((-{1})?\d+)))[)]?))
SUBTRACAO = ((((-{1})?(\d+)[.](\d+))|((-{1})?\d+))\s[-]\s([(]?((((-{1})?(\d+)[.](\d+))|((-{1})?\d+)))[)]?))
MULTIPLICACAO = "*"
DIVISAO = "/"


ATRIBUICAO = "="
ABERTURABLOCO = "{"
FECHAMENTOBLOCO = "}"
ABERTURAPARENTESES = "("
FECHAMENTOPARENTESES = ")"
COMENTARIO = "//"


MENOR = "<"
MAIOR = ">"
MENORIGUAL = "<="
MAIORIGUAL = ">="
IGUAL = "=="
DIFERENTE = "!="


TERMINADOR = ";"



%%

"if"                         { imprimir("Palavra reservada if", yytext()); }
"elseif"                     { imprimir("Palavra reservada elseif", yytext()); }
"else"                       { imprimir("Palavra reservada else", yytext()); }
"then"                       { imprimir("Palavra reservada then", yytext()); }
"int"                        { imprimir("Palavra reservada int", yytext()); }
"real"                       { imprimir("Palavra reservada real", yytext()); }
"for"                        { imprimir("Palavra reservada for", yytext()); }
"string"                     { imprimir("Palavra reservada string", yytext()); }
"print"                      { imprimir("Palavra reservada print", yytext()); }
"read"                       { imprimir("Palavra reservada read", yytext()); }




{BRANCO}                    { imprimir("Espaco em branco", yytext()); }
{IDENTIFICADOR}             { imprimir("Identificador", yytext()); }
{INTEIRO}                   { imprimir("Número Inteiro", yytext()); }
{EXPRESSAOLITERAL}          { imprimir("Expressao literal", yytext());}
{REAL}                      { imprimir("Número Real", yytext());}



{SOMA}                      { imprimir("Operacao de soma", yytext()); }
{SUBTRACAO}                 { imprimir("Operacao de subtracao", yytext()); }
{MULTIPLICACAO}             { imprimir("Operacao de multiplicacao", yytext());}
{DIVISAO}                   { imprimir("Operacao de divisao", yytext());}
{ATRIBUICAO}                { imprimir("Operador de atribuicao", yytext());}
{MENOR}                     { imprimir("Operador de menor", yytext());}
{MAIOR}                     { imprimir("Operador de maior", yytext());}
{MENORIGUAL}                { imprimir("Operador de menor ou igual", yytext());}
{MAIORIGUAL}                { imprimir("Operador de maior ou igual", yytext());}
{IGUAL}                     { imprimir("Operador de igualdade", yytext());}
{DIFERENTE}                 { imprimir("Operador de diferente de", yytext());}
{ABERTURABLOCO}             { imprimir("Abertura bloco", yytext());}
{FECHAMENTOBLOCO}           { imprimir("Fechamento bloco", yytext());}
{ABERTURAPARENTESES}        { imprimir("Inicio expressao", yytext());}
{FECHAMENTOPARENTESES}      { imprimir("Fim expressao", yytext());}
{COMENTARIO}                { imprimir("Comentario", yytext());}
{TERMINADOR}                { imprimir("Terminador de instrucao", yytext());}
{EXPRESSAOLITERALCOMVALOR}  { imprimir("Literal com valor", yytext());}
{EXPRESSAOLITERAL}          { imprimir("Expressao Literal", yytext());}



. { 
    PrintError();
    throw new RuntimeException("RUNTIME ERROR>> Lexema invalido: " + yytext());}


